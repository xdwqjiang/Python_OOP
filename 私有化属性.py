#
class Animal1:
    # 类的内部
    pass

class Dog1(Animal1):
    # 子类内部
    pass
# 当前这个属性相关补充.py文件可以看成是一个模块，然后除去类的内部，子类内部，剩余位置称为模块内部的其他位置
# 模块的外部：指的是在该项目下的其他的模块，比如：类的定义.py



# 属性的补充：
# 1.私有化属性，python中并没有真正的私有化支持，但是可以使用下划线完成伪私有的效果
# 类属性(方法)和实例属性(方法)遵循相同的规则
class Animal:
    x = 10
    _y = 20 # 一个下划线表示受保护的属性
    __z =30 # 两个下划线表示私有属性
    def test(self):
        print(self.x)
        print(self._y)
        print(self.__z)
    pass

class Dog(Animal):
    def test2(self):
        print(self.x)
        print(self._y)
        # print(self.__z)
        pass
    pass

# 2.只读属性：一个属性(一般指的是实例属性)，只能读取，不能写入
# 3.内置特殊属性

# 测试代码(私有化属性)
a = Animal()
a.test() # 类的内部可以访问公有属性;类的内部可以访问被保护的属性;类的内部可以访问私有属性

b = Dog()
b.test2() # 在派生类的内部也可以访问公有属性；派生类的内部可以访问被保护的属性；派生类的内部不能访问父类中的私有属性

print(Animal.x) # 在模块的其他位置可以访问类中的公有属性
print(Dog.x) # 在模块的其他位置可以访问衍生类中的公有属性
print(a.x) # 在模块的其他位置可以访问类的实例的公有属性
print(b.x) # 在模块的其他位置可以访问衍生类的实例的公有属性

print(Animal._y) # 在模块的其他位置可以访问类中的被保护的属性(但会被警告)
print(Dog._y) # 在模块的其他位置可以访问派生类中的被保护的属性(但会被警告)
print(a._y) # 在模块的其他位置可以访问类的实例的被保护的属性(但会被警告)
print(b._y) # 在模块的其他位置可以访问派生类的实例的被保护的属性(但会被警告)

# print(Animal.__z) # 在模块的其他位置无论是通过类、派生类、类的实例和派生类的实例都无法访问私有属性

fi = 666
_fi = 888
__fi = 999




